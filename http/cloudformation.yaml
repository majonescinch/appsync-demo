---
Description: AWS AppSync Vehicle API

Parameters:
  APIName:
    Type: String
    Description: "Name of the API, for generate names for resources"
    MinLength: 3
    MaxLength: 20
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9_\\-]*$"
  HttpEndpoint:
    Type: String
    Description: "Endpoint for HTTP API"
  HttpApiKey:
    Type: String
    Description: "API Key for authorising requests"
    NoEcho: true

Resources:
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: "The GraphQL API for the Vehicle App"
    Properties:
      AuthenticationType: "API_KEY"
      Name: !Sub ${APIName}

  AppSyncKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "The GraphQL API Key"

  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Query {
          vehicleData(filter: VehicleDataInput): VehicleData
        }

        type VehicleData {
          profileId: String
          header: VehicleHeader
          snapshotVersion: Int
        }

        input VehicleDataInput {
          vin: String!
          snapshotVersion: String = "$LATEST"
          type: String = "METAL"
        }

        type VehicleHeader {
          vin: String
          type: String
        }

        type VehicleListing {
          bodyType: String
          colour: String
        }

  HTTPDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: "vehicle_http"
      Type: HTTP
      HttpConfig:
        Endpoint: !Sub ${HttpEndpoint}

  AppSyncGetVehicleDataQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: vehicleData
      DataSourceName: !GetAtt HTTPDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2018-05-29",
            "method": "GET",
            ## E.G. if full path is https://api.xxxxxxxxx.com/posts then resourcePath would be /posts **
            "resourcePath": "/profiles/by-header",
            "params":{
                "query":$util.toJson($ctx.args.filter),
                "headers": {
                    "X-API-KEY": "CHANGE_ME"
                }
            }
        }
      ResponseMappingTemplate: |
        ## Raise a GraphQL field error in case of a datasource invocation error
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        ## if the response status code is not 200, then return an error. Else return the body **
        #if($ctx.result.statusCode == 200)
            ## If response is 200, return the body.
            $ctx.result.body
        #else
            ## If response is not 200, append the response to error block.
            $utils.appendError($ctx.result.body, "$ctx.result.statusCode")
        #end

Outputs:
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl

  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId
